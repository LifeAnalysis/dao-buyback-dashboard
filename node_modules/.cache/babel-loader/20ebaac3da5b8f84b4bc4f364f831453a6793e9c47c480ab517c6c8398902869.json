{"ast":null,"code":"var _DatabaseService;\n// Browser-compatible database service using localStorage\n// This replaces better-sqlite3 for client-side storage\n\nexport class DatabaseService {\n  static getInstance() {\n    if (!DatabaseService.instance) {\n      DatabaseService.instance = new DatabaseService();\n    }\n    return DatabaseService.instance;\n  }\n  constructor() {\n    this.BUYBACK_KEY = 'buyback_records';\n    this.HISTORICAL_KEY = 'historical_charts';\n    this.initializeWithSampleData();\n  }\n  forceRefresh() {\n    // Clear existing data and regenerate\n    localStorage.removeItem(this.BUYBACK_KEY);\n    localStorage.removeItem(this.HISTORICAL_KEY);\n    this.generateSampleData();\n  }\n  initializeWithSampleData() {\n    // Check if data already exists\n    const existingBuyback = localStorage.getItem(this.BUYBACK_KEY);\n    const existingHistorical = localStorage.getItem(this.HISTORICAL_KEY);\n\n    // Check if we have the correct number of protocols (should be 7)\n    let needsRefresh = false;\n    if (existingBuyback) {\n      try {\n        const data = JSON.parse(existingBuyback);\n        const uniqueProtocols = new Set(data.map(item => item.protocol));\n        if (uniqueProtocols.size < 7) {\n          needsRefresh = true;\n        }\n      } catch (e) {\n        needsRefresh = true;\n      }\n    }\n    if (!existingBuyback || !existingHistorical || needsRefresh) {\n      this.generateSampleData();\n    }\n  }\n  generateSampleData() {\n    const protocols = [{\n      name: 'Hyperliquid',\n      token: 'HYPE',\n      basePrice: 19.3,\n      baseVolume: 1200000000\n    }, {\n      name: 'Jupiter',\n      token: 'JUP',\n      basePrice: 0.6,\n      baseVolume: 850000000\n    }, {\n      name: 'Aave',\n      token: 'AAVE',\n      basePrice: 192,\n      baseVolume: 45000000\n    }, {\n      name: 'Jito',\n      token: 'JTO',\n      basePrice: 5.0,\n      baseVolume: 320000000\n    }, {\n      name: 'Pump.fun',\n      token: 'PUMP',\n      basePrice: 0.165,\n      baseVolume: 180000000\n    }, {\n      name: 'DeBridge',\n      token: 'DBR',\n      basePrice: 6.0,\n      baseVolume: 125000000\n    }, {\n      name: 'Fluid',\n      token: 'FLUID',\n      basePrice: 6.0,\n      baseVolume: 240000000\n    }];\n    const buybackRecords = [];\n    const historicalCharts = [];\n    const now = new Date();\n    let cumulativeData = {\n      'Hyperliquid': {\n        value: 350000000,\n        tokens: 18000000\n      },\n      'Jupiter': {\n        value: 24000000,\n        tokens: 42000000\n      },\n      'Aave': {\n        value: 20000000,\n        tokens: 115000\n      },\n      'Jito': {\n        value: 35000000,\n        tokens: 7500000\n      },\n      'Pump.fun': {\n        value: 20000000,\n        tokens: 125000000\n      },\n      'DeBridge': {\n        value: 12000000,\n        tokens: 2200000\n      },\n      'Fluid': {\n        value: 28000000,\n        tokens: 4800000\n      }\n    };\n    for (let i = 30; i >= 0; i--) {\n      const date = new Date(now);\n      date.setDate(date.getDate() - i);\n      const timestamp = date.toISOString();\n      protocols.forEach(protocol => {\n        // Generate realistic variance\n        const priceVariance = 0.9 + Math.random() * 0.2;\n        const volumeVariance = 0.8 + Math.random() * 0.4;\n        const price = protocol.basePrice * priceVariance;\n        const volume = protocol.baseVolume * volumeVariance;\n\n        // Calculate buyback amounts\n        let feePercent, dailyBuybackUSD, dailyTokens;\n        if (protocol.name === 'Hyperliquid') {\n          feePercent = 97;\n          dailyBuybackUSD = volume * 0.0002 * 0.97;\n          dailyTokens = dailyBuybackUSD / price;\n        } else if (protocol.name === 'Jupiter') {\n          feePercent = 50;\n          dailyBuybackUSD = volume * 0.0001 * 0.5;\n          dailyTokens = dailyBuybackUSD / price;\n        } else if (protocol.name === 'Jito') {\n          feePercent = 75;\n          dailyBuybackUSD = volume * 0.00015 * 0.75;\n          dailyTokens = dailyBuybackUSD / price;\n        } else if (protocol.name === 'Pump.fun') {\n          feePercent = 95;\n          dailyBuybackUSD = volume * 0.0003 * 0.95;\n          dailyTokens = dailyBuybackUSD / price;\n        } else if (protocol.name === 'DeBridge') {\n          feePercent = 60;\n          dailyBuybackUSD = volume * 0.0001 * 0.6;\n          dailyTokens = dailyBuybackUSD / price;\n        } else if (protocol.name === 'Fluid') {\n          feePercent = 80;\n          dailyBuybackUSD = volume * 0.00012 * 0.8;\n          dailyTokens = dailyBuybackUSD / price;\n        } else {\n          // Aave\n          feePercent = 100;\n          dailyBuybackUSD = Math.min(1000000 / 7, volume * 0.0004);\n          dailyTokens = dailyBuybackUSD / price;\n        }\n\n        // Update cumulative data\n        cumulativeData[protocol.name].value += dailyBuybackUSD;\n        cumulativeData[protocol.name].tokens += dailyTokens;\n\n        // Add buyback record\n        buybackRecords.push({\n          id: buybackRecords.length + 1,\n          protocol: protocol.name,\n          token: protocol.token,\n          timestamp,\n          total_repurchased: cumulativeData[protocol.name].tokens,\n          total_value_usd: cumulativeData[protocol.name].value,\n          circulating_supply_percent: protocol.name === 'Hyperliquid' ? 6.2 : protocol.name === 'Jupiter' ? 3.6 : protocol.name === 'Jito' ? 2.1 : protocol.name === 'Pump.fun' ? 0.445 : protocol.name === 'DeBridge' ? 1.5 : protocol.name === 'Fluid' ? 3.2 : 0.8,\n          estimated_annual_buyback: protocol.name === 'Hyperliquid' ? 600000000 : protocol.name === 'Jupiter' ? 250000000 : protocol.name === 'Jito' ? 180000000 : protocol.name === 'Pump.fun' ? 75000000 : protocol.name === 'DeBridge' ? 45000000 : protocol.name === 'Fluid' ? 95000000 : 52000000,\n          fee_allocation_percent: feePercent,\n          price_per_token: price,\n          trading_volume_24h: volume,\n          fee_generation_24h: volume * 0.0002\n        });\n\n        // Add historical chart data\n        historicalCharts.push({\n          id: historicalCharts.length + 1,\n          protocol: protocol.name,\n          timestamp,\n          value_usd: dailyBuybackUSD,\n          tokens_amount: dailyTokens,\n          cumulative_value: cumulativeData[protocol.name].value,\n          cumulative_tokens: cumulativeData[protocol.name].tokens\n        });\n      });\n    }\n    localStorage.setItem(this.BUYBACK_KEY, JSON.stringify(buybackRecords));\n    localStorage.setItem(this.HISTORICAL_KEY, JSON.stringify(historicalCharts));\n  }\n\n  // Insert buyback record\n  insertBuybackRecord(record) {\n    const records = this.getBuybackRecords();\n    const newId = Math.max(...records.map(r => r.id || 0), 0) + 1;\n    record.id = newId;\n    records.push(record);\n    localStorage.setItem(this.BUYBACK_KEY, JSON.stringify(records));\n    return newId;\n  }\n\n  // Insert historical chart data\n  insertHistoricalData(data) {\n    const records = this.getHistoricalRecords();\n    const newId = Math.max(...records.map(r => r.id || 0), 0) + 1;\n    data.id = newId;\n    records.push(data);\n    localStorage.setItem(this.HISTORICAL_KEY, JSON.stringify(records));\n    return newId;\n  }\n  getBuybackRecords() {\n    const data = localStorage.getItem(this.BUYBACK_KEY);\n    return data ? JSON.parse(data) : [];\n  }\n  getHistoricalRecords() {\n    const data = localStorage.getItem(this.HISTORICAL_KEY);\n    return data ? JSON.parse(data) : [];\n  }\n\n  // Get latest buyback data for all protocols\n  getLatestBuybackData() {\n    const records = this.getBuybackRecords();\n    const latestByProtocol = {};\n    records.forEach(record => {\n      if (!latestByProtocol[record.protocol] || new Date(record.timestamp) > new Date(latestByProtocol[record.protocol].timestamp)) {\n        latestByProtocol[record.protocol] = record;\n      }\n    });\n    return Object.values(latestByProtocol);\n  }\n\n  // Get historical data for charts\n  getHistoricalData(protocol, days = 30) {\n    const records = this.getHistoricalRecords();\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - days);\n    return records.filter(record => {\n      const recordDate = new Date(record.timestamp);\n      const matchesProtocol = !protocol || record.protocol === protocol;\n      const withinTimeframe = recordDate >= cutoffDate;\n      return matchesProtocol && withinTimeframe;\n    }).sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n  }\n\n  // Get buyback trends\n  getBuybackTrends(protocol, days = 30) {\n    const records = this.getBuybackRecords();\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - days);\n    return records.filter(record => {\n      const recordDate = new Date(record.timestamp);\n      return record.protocol === protocol && recordDate >= cutoffDate;\n    }).map(record => ({\n      timestamp: record.timestamp,\n      total_value_usd: record.total_value_usd,\n      total_repurchased: record.total_repurchased,\n      price_per_token: record.price_per_token,\n      trading_volume_24h: record.trading_volume_24h\n    })).sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n  }\n\n  // Get performance metrics\n  getPerformanceMetrics() {\n    const records = this.getBuybackRecords();\n    const metricsByProtocol = {};\n    records.forEach(record => {\n      if (!metricsByProtocol[record.protocol]) {\n        metricsByProtocol[record.protocol] = {\n          protocol: record.protocol,\n          data_points: 0,\n          total_value: 0,\n          values: [],\n          supply_reductions: []\n        };\n      }\n      const metrics = metricsByProtocol[record.protocol];\n      metrics.data_points++;\n      metrics.total_value += record.total_value_usd;\n      metrics.values.push(record.total_value_usd);\n      metrics.supply_reductions.push(record.circulating_supply_percent);\n    });\n    return Object.values(metricsByProtocol).map(metrics => ({\n      protocol: metrics.protocol,\n      data_points: metrics.data_points,\n      avg_value_usd: metrics.total_value / metrics.data_points,\n      max_value_usd: Math.max(...metrics.values),\n      min_value_usd: Math.min(...metrics.values),\n      avg_supply_reduction: metrics.supply_reductions.reduce((a, b) => a + b, 0) / metrics.supply_reductions.length\n    }));\n  }\n\n  // Clean old data (keep last 90 days)\n  cleanOldData() {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - 90);\n    const buybackRecords = this.getBuybackRecords();\n    const historicalRecords = this.getHistoricalRecords();\n    const filteredBuyback = buybackRecords.filter(record => new Date(record.timestamp) >= cutoffDate);\n    const filteredHistorical = historicalRecords.filter(record => new Date(record.timestamp) >= cutoffDate);\n    localStorage.setItem(this.BUYBACK_KEY, JSON.stringify(filteredBuyback));\n    localStorage.setItem(this.HISTORICAL_KEY, JSON.stringify(filteredHistorical));\n    return buybackRecords.length - filteredBuyback.length + (historicalRecords.length - filteredHistorical.length);\n  }\n\n  // Close database connection (no-op for localStorage)\n  close() {\n    // No-op for localStorage implementation\n  }\n}\n_DatabaseService = DatabaseService;\nDatabaseService.instance = void 0;","map":{"version":3,"names":["DatabaseService","getInstance","instance","constructor","BUYBACK_KEY","HISTORICAL_KEY","initializeWithSampleData","forceRefresh","localStorage","removeItem","generateSampleData","existingBuyback","getItem","existingHistorical","needsRefresh","data","JSON","parse","uniqueProtocols","Set","map","item","protocol","size","e","protocols","name","token","basePrice","baseVolume","buybackRecords","historicalCharts","now","Date","cumulativeData","value","tokens","i","date","setDate","getDate","timestamp","toISOString","forEach","priceVariance","Math","random","volumeVariance","price","volume","feePercent","dailyBuybackUSD","dailyTokens","min","push","id","length","total_repurchased","total_value_usd","circulating_supply_percent","estimated_annual_buyback","fee_allocation_percent","price_per_token","trading_volume_24h","fee_generation_24h","value_usd","tokens_amount","cumulative_value","cumulative_tokens","setItem","stringify","insertBuybackRecord","record","records","getBuybackRecords","newId","max","r","insertHistoricalData","getHistoricalRecords","getLatestBuybackData","latestByProtocol","Object","values","getHistoricalData","days","cutoffDate","filter","recordDate","matchesProtocol","withinTimeframe","sort","a","b","getTime","getBuybackTrends","getPerformanceMetrics","metricsByProtocol","data_points","total_value","supply_reductions","metrics","avg_value_usd","max_value_usd","min_value_usd","avg_supply_reduction","reduce","cleanOldData","historicalRecords","filteredBuyback","filteredHistorical","close","_DatabaseService"],"sources":["/Users/gherardolattanzi/treasury/src/database/browserDb.ts"],"sourcesContent":["// Browser-compatible database service using localStorage\n// This replaces better-sqlite3 for client-side storage\n\nexport interface BuybackRecord {\n  id?: number;\n  protocol: string;\n  token: string;\n  timestamp: string;\n  total_repurchased: number;\n  total_value_usd: number;\n  circulating_supply_percent: number;\n  estimated_annual_buyback: number;\n  fee_allocation_percent: number;\n  price_per_token: number;\n  trading_volume_24h?: number;\n  fee_generation_24h?: number;\n}\n\nexport interface HistoricalChart {\n  id?: number;\n  protocol: string;\n  timestamp: string;\n  value_usd: number;\n  tokens_amount: number;\n  cumulative_value: number;\n  cumulative_tokens: number;\n}\n\nexport class DatabaseService {\n  private static instance: DatabaseService;\n  private readonly BUYBACK_KEY = 'buyback_records';\n  private readonly HISTORICAL_KEY = 'historical_charts';\n\n  public static getInstance(): DatabaseService {\n    if (!DatabaseService.instance) {\n      DatabaseService.instance = new DatabaseService();\n    }\n    return DatabaseService.instance;\n  }\n\n  constructor() {\n    this.initializeWithSampleData();\n  }\n\n  public forceRefresh(): void {\n    // Clear existing data and regenerate\n    localStorage.removeItem(this.BUYBACK_KEY);\n    localStorage.removeItem(this.HISTORICAL_KEY);\n    this.generateSampleData();\n  }\n\n  private initializeWithSampleData(): void {\n    // Check if data already exists\n    const existingBuyback = localStorage.getItem(this.BUYBACK_KEY);\n    const existingHistorical = localStorage.getItem(this.HISTORICAL_KEY);\n    \n    // Check if we have the correct number of protocols (should be 7)\n    let needsRefresh = false;\n    if (existingBuyback) {\n      try {\n        const data = JSON.parse(existingBuyback);\n        const uniqueProtocols = new Set(data.map((item: any) => item.protocol));\n        if (uniqueProtocols.size < 7) {\n          needsRefresh = true;\n        }\n      } catch (e) {\n        needsRefresh = true;\n      }\n    }\n    \n    if (!existingBuyback || !existingHistorical || needsRefresh) {\n      this.generateSampleData();\n    }\n  }\n\n  private generateSampleData(): void {\n    const protocols = [\n      { name: 'Hyperliquid', token: 'HYPE', basePrice: 19.3, baseVolume: 1200000000 },\n      { name: 'Jupiter', token: 'JUP', basePrice: 0.6, baseVolume: 850000000 },\n      { name: 'Aave', token: 'AAVE', basePrice: 192, baseVolume: 45000000 },\n      { name: 'Jito', token: 'JTO', basePrice: 5.0, baseVolume: 320000000 },\n      { name: 'Pump.fun', token: 'PUMP', basePrice: 0.165, baseVolume: 180000000 },\n      { name: 'DeBridge', token: 'DBR', basePrice: 6.0, baseVolume: 125000000 },\n      { name: 'Fluid', token: 'FLUID', basePrice: 6.0, baseVolume: 240000000 }\n    ];\n\n    const buybackRecords: BuybackRecord[] = [];\n    const historicalCharts: HistoricalChart[] = [];\n    \n    const now = new Date();\n    let cumulativeData: { [key: string]: { value: number; tokens: number } } = {\n      'Hyperliquid': { value: 350000000, tokens: 18000000 },\n      'Jupiter': { value: 24000000, tokens: 42000000 },\n      'Aave': { value: 20000000, tokens: 115000 },\n      'Jito': { value: 35000000, tokens: 7500000 },\n      'Pump.fun': { value: 20000000, tokens: 125000000 },\n      'DeBridge': { value: 12000000, tokens: 2200000 },\n      'Fluid': { value: 28000000, tokens: 4800000 }\n    };\n\n    for (let i = 30; i >= 0; i--) {\n      const date = new Date(now);\n      date.setDate(date.getDate() - i);\n      const timestamp = date.toISOString();\n\n      protocols.forEach(protocol => {\n        // Generate realistic variance\n        const priceVariance = 0.9 + Math.random() * 0.2;\n        const volumeVariance = 0.8 + Math.random() * 0.4;\n        const price = protocol.basePrice * priceVariance;\n        const volume = protocol.baseVolume * volumeVariance;\n        \n        // Calculate buyback amounts\n        let feePercent, dailyBuybackUSD, dailyTokens;\n        \n        if (protocol.name === 'Hyperliquid') {\n          feePercent = 97;\n          dailyBuybackUSD = (volume * 0.0002 * 0.97);\n          dailyTokens = dailyBuybackUSD / price;\n        } else if (protocol.name === 'Jupiter') {\n          feePercent = 50;\n          dailyBuybackUSD = (volume * 0.0001 * 0.5);\n          dailyTokens = dailyBuybackUSD / price;\n        } else if (protocol.name === 'Jito') {\n          feePercent = 75;\n          dailyBuybackUSD = (volume * 0.00015 * 0.75);\n          dailyTokens = dailyBuybackUSD / price;\n        } else if (protocol.name === 'Pump.fun') {\n          feePercent = 95;\n          dailyBuybackUSD = (volume * 0.0003 * 0.95);\n          dailyTokens = dailyBuybackUSD / price;\n        } else if (protocol.name === 'DeBridge') {\n          feePercent = 60;\n          dailyBuybackUSD = (volume * 0.0001 * 0.6);\n          dailyTokens = dailyBuybackUSD / price;\n        } else if (protocol.name === 'Fluid') {\n          feePercent = 80;\n          dailyBuybackUSD = (volume * 0.00012 * 0.8);\n          dailyTokens = dailyBuybackUSD / price;\n        } else { // Aave\n          feePercent = 100;\n          dailyBuybackUSD = Math.min(1000000 / 7, volume * 0.0004);\n          dailyTokens = dailyBuybackUSD / price;\n        }\n\n        // Update cumulative data\n        cumulativeData[protocol.name].value += dailyBuybackUSD;\n        cumulativeData[protocol.name].tokens += dailyTokens;\n\n        // Add buyback record\n        buybackRecords.push({\n          id: buybackRecords.length + 1,\n          protocol: protocol.name,\n          token: protocol.token,\n          timestamp,\n          total_repurchased: cumulativeData[protocol.name].tokens,\n          total_value_usd: cumulativeData[protocol.name].value,\n          circulating_supply_percent: protocol.name === 'Hyperliquid' ? 6.2 : protocol.name === 'Jupiter' ? 3.6 : protocol.name === 'Jito' ? 2.1 : protocol.name === 'Pump.fun' ? 0.445 : protocol.name === 'DeBridge' ? 1.5 : protocol.name === 'Fluid' ? 3.2 : 0.8,\n          estimated_annual_buyback: protocol.name === 'Hyperliquid' ? 600000000 : protocol.name === 'Jupiter' ? 250000000 : protocol.name === 'Jito' ? 180000000 : protocol.name === 'Pump.fun' ? 75000000 : protocol.name === 'DeBridge' ? 45000000 : protocol.name === 'Fluid' ? 95000000 : 52000000,\n          fee_allocation_percent: feePercent,\n          price_per_token: price,\n          trading_volume_24h: volume,\n          fee_generation_24h: volume * 0.0002\n        });\n\n        // Add historical chart data\n        historicalCharts.push({\n          id: historicalCharts.length + 1,\n          protocol: protocol.name,\n          timestamp,\n          value_usd: dailyBuybackUSD,\n          tokens_amount: dailyTokens,\n          cumulative_value: cumulativeData[protocol.name].value,\n          cumulative_tokens: cumulativeData[protocol.name].tokens\n        });\n      });\n    }\n\n    localStorage.setItem(this.BUYBACK_KEY, JSON.stringify(buybackRecords));\n    localStorage.setItem(this.HISTORICAL_KEY, JSON.stringify(historicalCharts));\n  }\n\n  // Insert buyback record\n  insertBuybackRecord(record: BuybackRecord): number {\n    const records = this.getBuybackRecords();\n    const newId = Math.max(...records.map(r => r.id || 0), 0) + 1;\n    record.id = newId;\n    records.push(record);\n    localStorage.setItem(this.BUYBACK_KEY, JSON.stringify(records));\n    return newId;\n  }\n\n  // Insert historical chart data\n  insertHistoricalData(data: HistoricalChart): number {\n    const records = this.getHistoricalRecords();\n    const newId = Math.max(...records.map(r => r.id || 0), 0) + 1;\n    data.id = newId;\n    records.push(data);\n    localStorage.setItem(this.HISTORICAL_KEY, JSON.stringify(records));\n    return newId;\n  }\n\n  private getBuybackRecords(): BuybackRecord[] {\n    const data = localStorage.getItem(this.BUYBACK_KEY);\n    return data ? JSON.parse(data) : [];\n  }\n\n  private getHistoricalRecords(): HistoricalChart[] {\n    const data = localStorage.getItem(this.HISTORICAL_KEY);\n    return data ? JSON.parse(data) : [];\n  }\n\n  // Get latest buyback data for all protocols\n  getLatestBuybackData(): BuybackRecord[] {\n    const records = this.getBuybackRecords();\n    const latestByProtocol: { [protocol: string]: BuybackRecord } = {};\n    \n    records.forEach(record => {\n      if (!latestByProtocol[record.protocol] || \n          new Date(record.timestamp) > new Date(latestByProtocol[record.protocol].timestamp)) {\n        latestByProtocol[record.protocol] = record;\n      }\n    });\n\n    return Object.values(latestByProtocol);\n  }\n\n  // Get historical data for charts\n  getHistoricalData(protocol?: string, days: number = 30): HistoricalChart[] {\n    const records = this.getHistoricalRecords();\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - days);\n    \n    return records.filter(record => {\n      const recordDate = new Date(record.timestamp);\n      const matchesProtocol = !protocol || record.protocol === protocol;\n      const withinTimeframe = recordDate >= cutoffDate;\n      return matchesProtocol && withinTimeframe;\n    }).sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n  }\n\n  // Get buyback trends\n  getBuybackTrends(protocol: string, days: number = 30): any[] {\n    const records = this.getBuybackRecords();\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - days);\n    \n    return records\n      .filter(record => {\n        const recordDate = new Date(record.timestamp);\n        return record.protocol === protocol && recordDate >= cutoffDate;\n      })\n      .map(record => ({\n        timestamp: record.timestamp,\n        total_value_usd: record.total_value_usd,\n        total_repurchased: record.total_repurchased,\n        price_per_token: record.price_per_token,\n        trading_volume_24h: record.trading_volume_24h\n      }))\n      .sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n  }\n\n  // Get performance metrics\n  getPerformanceMetrics(): any[] {\n    const records = this.getBuybackRecords();\n    const metricsByProtocol: { [protocol: string]: any } = {};\n    \n    records.forEach(record => {\n      if (!metricsByProtocol[record.protocol]) {\n        metricsByProtocol[record.protocol] = {\n          protocol: record.protocol,\n          data_points: 0,\n          total_value: 0,\n          values: [],\n          supply_reductions: []\n        };\n      }\n      \n      const metrics = metricsByProtocol[record.protocol];\n      metrics.data_points++;\n      metrics.total_value += record.total_value_usd;\n      metrics.values.push(record.total_value_usd);\n      metrics.supply_reductions.push(record.circulating_supply_percent);\n    });\n\n    return Object.values(metricsByProtocol).map((metrics: any) => ({\n      protocol: metrics.protocol,\n      data_points: metrics.data_points,\n      avg_value_usd: metrics.total_value / metrics.data_points,\n      max_value_usd: Math.max(...metrics.values),\n      min_value_usd: Math.min(...metrics.values),\n      avg_supply_reduction: metrics.supply_reductions.reduce((a: number, b: number) => a + b, 0) / metrics.supply_reductions.length\n    }));\n  }\n\n  // Clean old data (keep last 90 days)\n  cleanOldData(): number {\n    const cutoffDate = new Date();\n    cutoffDate.setDate(cutoffDate.getDate() - 90);\n    \n    const buybackRecords = this.getBuybackRecords();\n    const historicalRecords = this.getHistoricalRecords();\n    \n    const filteredBuyback = buybackRecords.filter(record => \n      new Date(record.timestamp) >= cutoffDate\n    );\n    const filteredHistorical = historicalRecords.filter(record => \n      new Date(record.timestamp) >= cutoffDate\n    );\n    \n    localStorage.setItem(this.BUYBACK_KEY, JSON.stringify(filteredBuyback));\n    localStorage.setItem(this.HISTORICAL_KEY, JSON.stringify(filteredHistorical));\n    \n    return (buybackRecords.length - filteredBuyback.length) + \n           (historicalRecords.length - filteredHistorical.length);\n  }\n\n  // Close database connection (no-op for localStorage)\n  close(): void {\n    // No-op for localStorage implementation\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}