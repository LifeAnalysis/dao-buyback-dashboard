{"ast":null,"code":"/**\n * Utility functions for formatting numbers, currency, and other data\n */\n\nimport { NUMBER_FORMATS } from '../constants';\n\n/**\n * Format a number as currency with appropriate suffixes (K, M, B)\n */\nexport const formatCurrency = (num, decimals = NUMBER_FORMATS.CURRENCY_DECIMALS) => {\n  if (num >= 1000000000) {\n    return `$${(num / 1000000000).toFixed(decimals)}B`;\n  }\n  if (num >= 1000000) {\n    return `$${(num / 1000000).toFixed(decimals)}M`;\n  }\n  if (num >= 1000) {\n    return `$${(num / 1000).toFixed(decimals)}K`;\n  }\n  return `$${num.toLocaleString(undefined, {\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals\n  })}`;\n};\n\n/**\n * Format a number as volume with appropriate suffixes\n */\nexport const formatVolume = (num, decimals = NUMBER_FORMATS.VOLUME_DECIMALS) => {\n  if (num >= 1000000000) {\n    return `${(num / 1000000000).toFixed(decimals)}B`;\n  }\n  if (num >= 1000000) {\n    return `${(num / 1000000).toFixed(decimals)}M`;\n  }\n  if (num >= 1000) {\n    return `${(num / 1000).toFixed(decimals)}K`;\n  }\n  return num.toLocaleString(undefined, {\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals\n  });\n};\n\n/**\n * Format a number as percentage\n */\nexport const formatPercentage = (num, decimals = NUMBER_FORMATS.PERCENTAGE_DECIMALS, showSign = false) => {\n  const sign = showSign && num > 0 ? '+' : '';\n  return `${sign}${num.toFixed(decimals)}%`;\n};\n\n/**\n * Format a number as a price with appropriate decimal places\n */\nexport const formatPrice = (num, decimals = NUMBER_FORMATS.PRICE_DECIMALS) => {\n  return `$${num.toFixed(decimals)}`;\n};\n\n/**\n * Format a large number with appropriate suffixes (for token amounts)\n */\nexport const formatTokenAmount = (num, decimals = 1) => {\n  if (num >= 1000000000) {\n    return `${(num / 1000000000).toFixed(decimals)}B`;\n  }\n  if (num >= 1000000) {\n    return `${(num / 1000000).toFixed(decimals)}M`;\n  }\n  if (num >= 1000) {\n    return `${(num / 1000).toFixed(decimals)}K`;\n  }\n  return num.toLocaleString(undefined, {\n    maximumFractionDigits: decimals\n  });\n};\n\n/**\n * Format a date for display\n */\nexport const formatDate = date => {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  return d.toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric'\n  });\n};\n\n/**\n * Format a timestamp for charts\n */\nexport const formatChartDate = timestamp => {\n  const d = typeof timestamp === 'string' ? new Date(timestamp) : timestamp;\n  return d.toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    year: '2-digit'\n  });\n};\n\n/**\n * Truncate text with ellipsis\n */\nexport const truncateText = (text, maxLength) => {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength - 3) + '...';\n};\n\n/**\n * Capitalize first letter of each word\n */\nexport const capitalizeWords = str => {\n  return str.replace(/\\b\\w/g, l => l.toUpperCase());\n};\n\n/**\n * Get relative time string (e.g., \"2 hours ago\")\n */\nexport const getRelativeTime = date => {\n  const now = new Date();\n  const past = typeof date === 'string' ? new Date(date) : date;\n  const diffInSeconds = Math.floor((now.getTime() - past.getTime()) / 1000);\n  if (diffInSeconds < 60) return 'Just now';\n  if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;\n  if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;\n  if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)} days ago`;\n  return formatDate(past);\n};","map":{"version":3,"names":["NUMBER_FORMATS","formatCurrency","num","decimals","CURRENCY_DECIMALS","toFixed","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","formatVolume","VOLUME_DECIMALS","formatPercentage","PERCENTAGE_DECIMALS","showSign","sign","formatPrice","PRICE_DECIMALS","formatTokenAmount","formatDate","date","d","Date","toLocaleDateString","month","day","formatChartDate","timestamp","year","truncateText","text","maxLength","length","substring","capitalizeWords","str","replace","l","toUpperCase","getRelativeTime","now","past","diffInSeconds","Math","floor","getTime"],"sources":["/Users/gherardolattanzi/treasury/src/utils/formatters.ts"],"sourcesContent":["/**\n * Utility functions for formatting numbers, currency, and other data\n */\n\nimport { NUMBER_FORMATS } from '../constants';\n\n/**\n * Format a number as currency with appropriate suffixes (K, M, B)\n */\nexport const formatCurrency = (num: number, decimals: number = NUMBER_FORMATS.CURRENCY_DECIMALS): string => {\n  if (num >= 1000000000) {\n    return `$${(num / 1000000000).toFixed(decimals)}B`;\n  }\n  if (num >= 1000000) {\n    return `$${(num / 1000000).toFixed(decimals)}M`;\n  }\n  if (num >= 1000) {\n    return `$${(num / 1000).toFixed(decimals)}K`;\n  }\n  return `$${num.toLocaleString(undefined, { \n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals \n  })}`;\n};\n\n/**\n * Format a number as volume with appropriate suffixes\n */\nexport const formatVolume = (num: number, decimals: number = NUMBER_FORMATS.VOLUME_DECIMALS): string => {\n  if (num >= 1000000000) {\n    return `${(num / 1000000000).toFixed(decimals)}B`;\n  }\n  if (num >= 1000000) {\n    return `${(num / 1000000).toFixed(decimals)}M`;\n  }\n  if (num >= 1000) {\n    return `${(num / 1000).toFixed(decimals)}K`;\n  }\n  return num.toLocaleString(undefined, { \n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals \n  });\n};\n\n/**\n * Format a number as percentage\n */\nexport const formatPercentage = (\n  num: number, \n  decimals: number = NUMBER_FORMATS.PERCENTAGE_DECIMALS,\n  showSign: boolean = false\n): string => {\n  const sign = showSign && num > 0 ? '+' : '';\n  return `${sign}${num.toFixed(decimals)}%`;\n};\n\n/**\n * Format a number as a price with appropriate decimal places\n */\nexport const formatPrice = (num: number, decimals: number = NUMBER_FORMATS.PRICE_DECIMALS): string => {\n  return `$${num.toFixed(decimals)}`;\n};\n\n/**\n * Format a large number with appropriate suffixes (for token amounts)\n */\nexport const formatTokenAmount = (num: number, decimals: number = 1): string => {\n  if (num >= 1000000000) {\n    return `${(num / 1000000000).toFixed(decimals)}B`;\n  }\n  if (num >= 1000000) {\n    return `${(num / 1000000).toFixed(decimals)}M`;\n  }\n  if (num >= 1000) {\n    return `${(num / 1000).toFixed(decimals)}K`;\n  }\n  return num.toLocaleString(undefined, { \n    maximumFractionDigits: decimals \n  });\n};\n\n/**\n * Format a date for display\n */\nexport const formatDate = (date: string | Date): string => {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  return d.toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n  });\n};\n\n/**\n * Format a timestamp for charts\n */\nexport const formatChartDate = (timestamp: string | Date): string => {\n  const d = typeof timestamp === 'string' ? new Date(timestamp) : timestamp;\n  return d.toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    year: '2-digit',\n  });\n};\n\n/**\n * Truncate text with ellipsis\n */\nexport const truncateText = (text: string, maxLength: number): string => {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength - 3) + '...';\n};\n\n/**\n * Capitalize first letter of each word\n */\nexport const capitalizeWords = (str: string): string => {\n  return str.replace(/\\b\\w/g, l => l.toUpperCase());\n};\n\n/**\n * Get relative time string (e.g., \"2 hours ago\")\n */\nexport const getRelativeTime = (date: string | Date): string => {\n  const now = new Date();\n  const past = typeof date === 'string' ? new Date(date) : date;\n  const diffInSeconds = Math.floor((now.getTime() - past.getTime()) / 1000);\n\n  if (diffInSeconds < 60) return 'Just now';\n  if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;\n  if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;\n  if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)} days ago`;\n  return formatDate(past);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}