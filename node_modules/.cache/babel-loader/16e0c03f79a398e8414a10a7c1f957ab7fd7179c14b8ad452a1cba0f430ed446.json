{"ast":null,"code":"var _DataService;\nimport axios from 'axios';\nimport { MOCK_BUYBACK_DATA } from '../config/protocols';\nexport class DataService {\n  constructor() {\n    this.cache = new Map();\n    this.CACHE_DURATION = 5 * 60 * 1000;\n  }\n  // 5 minutes\n\n  static getInstance() {\n    if (!DataService.instance) {\n      DataService.instance = new DataService();\n    }\n    return DataService.instance;\n  }\n  isValidCache(key) {\n    const cached = this.cache.get(key);\n    return cached ? Date.now() - cached.timestamp < this.CACHE_DURATION : false;\n  }\n  async getTokenPrice(coingeckoId) {\n    const cacheKey = `price_${coingeckoId}`;\n    if (this.isValidCache(cacheKey)) {\n      return this.cache.get(cacheKey).data;\n    }\n    try {\n      var _response$data$coinge;\n      // Try to fetch from CoinGecko API\n      const response = await axios.get(`https://api.coingecko.com/api/v3/simple/price?ids=${coingeckoId}&vs_currencies=usd`, {\n        timeout: 5000\n      });\n      const price = ((_response$data$coinge = response.data[coingeckoId]) === null || _response$data$coinge === void 0 ? void 0 : _response$data$coinge.usd) || 0;\n      this.cache.set(cacheKey, {\n        data: price,\n        timestamp: Date.now()\n      });\n      return price;\n    } catch (error) {\n      console.warn(`Failed to fetch price for ${coingeckoId}:`, error);\n      // Return mock prices if API fails\n      const mockPrices = {\n        'hyperliquid': 19.3,\n        'jupiter-exchange-solana': 0.6,\n        'aave': 192.0\n      };\n      return mockPrices[coingeckoId] || 1;\n    }\n  }\n  async getBuybackData(token) {\n    const cacheKey = `buyback_${token}`;\n    if (this.isValidCache(cacheKey)) {\n      return this.cache.get(cacheKey).data;\n    }\n    try {\n      // In a real implementation, this would fetch from various APIs\n      // For now, we'll use the mock data with real price updates\n      const mockData = MOCK_BUYBACK_DATA[token];\n      if (!mockData) {\n        throw new Error(`No data available for token: ${token}`);\n      }\n\n      // Add some randomness to simulate real-time updates\n      const variance = 0.95 + Math.random() * 0.1; // ±5% variance\n      const updatedData = {\n        ...mockData,\n        totalRepurchased: Math.floor(mockData.totalRepurchased * variance),\n        totalValueUSD: Math.floor(mockData.totalValueUSD * variance),\n        lastUpdated: new Date().toISOString().split('T')[0]\n      };\n      this.cache.set(cacheKey, {\n        data: updatedData,\n        timestamp: Date.now()\n      });\n      return updatedData;\n    } catch (error) {\n      console.error(`Failed to fetch buyback data for ${token}:`, error);\n      throw error;\n    }\n  }\n  async getAllBuybackData() {\n    const tokens = ['HYPE', 'JUP', 'AAVE'];\n    const promises = tokens.map(token => this.getBuybackData(token));\n    return Promise.all(promises);\n  }\n\n  // Method to fetch protocol-specific data (can be extended with real APIs)\n  async getProtocolMetrics(protocol) {\n    switch (protocol.toLowerCase()) {\n      case 'hyperliquid':\n        return this.getHyperliquidMetrics();\n      case 'jupiter':\n        return this.getJupiterMetrics();\n      case 'aave':\n        return this.getAaveMetrics();\n      default:\n        throw new Error(`Unsupported protocol: ${protocol}`);\n    }\n  }\n  async getHyperliquidMetrics() {\n    // In real implementation, this would call Hyperliquid's API\n    return {\n      tradingVolume24h: 1200000000,\n      totalValueLocked: 890000000,\n      feeGeneration24h: 2400000\n    };\n  }\n  async getJupiterMetrics() {\n    // In real implementation, this would call Jupiter's API\n    return {\n      tradingVolume24h: 850000000,\n      totalValueLocked: 320000000,\n      feeGeneration24h: 850000\n    };\n  }\n  async getAaveMetrics() {\n    // In real implementation, this would call Aave's API\n    return {\n      tradingVolume24h: 45000000,\n      totalValueLocked: 12500000000,\n      feeGeneration24h: 180000\n    };\n  }\n}\n_DataService = DataService;\nDataService.instance = void 0;","map":{"version":3,"names":["axios","MOCK_BUYBACK_DATA","DataService","constructor","cache","Map","CACHE_DURATION","getInstance","instance","isValidCache","key","cached","get","Date","now","timestamp","getTokenPrice","coingeckoId","cacheKey","data","_response$data$coinge","response","timeout","price","usd","set","error","console","warn","mockPrices","getBuybackData","token","mockData","Error","variance","Math","random","updatedData","totalRepurchased","floor","totalValueUSD","lastUpdated","toISOString","split","getAllBuybackData","tokens","promises","map","Promise","all","getProtocolMetrics","protocol","toLowerCase","getHyperliquidMetrics","getJupiterMetrics","getAaveMetrics","tradingVolume24h","totalValueLocked","feeGeneration24h","_DataService"],"sources":["/Users/gherardolattanzi/treasury/src/services/dataService.ts"],"sourcesContent":["import axios from 'axios';\nimport { BuybackData } from '../types';\nimport { MOCK_BUYBACK_DATA } from '../config/protocols';\nimport { DatabaseService, BuybackRecord, HistoricalChart } from '../database/db';\nimport { format } from 'date-fns';\n\nexport class DataService {\n  private static instance: DataService;\n  private cache: Map<string, { data: any; timestamp: number }> = new Map();\n  private readonly CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\n\n  public static getInstance(): DataService {\n    if (!DataService.instance) {\n      DataService.instance = new DataService();\n    }\n    return DataService.instance;\n  }\n\n  private isValidCache(key: string): boolean {\n    const cached = this.cache.get(key);\n    return cached ? Date.now() - cached.timestamp < this.CACHE_DURATION : false;\n  }\n\n  async getTokenPrice(coingeckoId: string): Promise<number> {\n    const cacheKey = `price_${coingeckoId}`;\n    \n    if (this.isValidCache(cacheKey)) {\n      return this.cache.get(cacheKey)!.data;\n    }\n\n    try {\n      // Try to fetch from CoinGecko API\n      const response = await axios.get(\n        `https://api.coingecko.com/api/v3/simple/price?ids=${coingeckoId}&vs_currencies=usd`,\n        { timeout: 5000 }\n      );\n      \n      const price = response.data[coingeckoId]?.usd || 0;\n      this.cache.set(cacheKey, { data: price, timestamp: Date.now() });\n      return price;\n    } catch (error) {\n      console.warn(`Failed to fetch price for ${coingeckoId}:`, error);\n      // Return mock prices if API fails\n      const mockPrices: { [key: string]: number } = {\n        'hyperliquid': 19.3,\n        'jupiter-exchange-solana': 0.6,\n        'aave': 192.0\n      };\n      return mockPrices[coingeckoId] || 1;\n    }\n  }\n\n  async getBuybackData(token: string): Promise<BuybackData> {\n    const cacheKey = `buyback_${token}`;\n    \n    if (this.isValidCache(cacheKey)) {\n      return this.cache.get(cacheKey)!.data;\n    }\n\n    try {\n      // In a real implementation, this would fetch from various APIs\n      // For now, we'll use the mock data with real price updates\n      const mockData = MOCK_BUYBACK_DATA[token as keyof typeof MOCK_BUYBACK_DATA];\n      if (!mockData) {\n        throw new Error(`No data available for token: ${token}`);\n      }\n\n      // Add some randomness to simulate real-time updates\n      const variance = 0.95 + Math.random() * 0.1; // ±5% variance\n      const updatedData: BuybackData = {\n        ...mockData,\n        totalRepurchased: Math.floor(mockData.totalRepurchased * variance),\n        totalValueUSD: Math.floor(mockData.totalValueUSD * variance),\n        lastUpdated: new Date().toISOString().split('T')[0]\n      };\n\n      this.cache.set(cacheKey, { data: updatedData, timestamp: Date.now() });\n      return updatedData;\n    } catch (error) {\n      console.error(`Failed to fetch buyback data for ${token}:`, error);\n      throw error;\n    }\n  }\n\n  async getAllBuybackData(): Promise<BuybackData[]> {\n    const tokens = ['HYPE', 'JUP', 'AAVE'];\n    const promises = tokens.map(token => this.getBuybackData(token));\n    return Promise.all(promises);\n  }\n\n  // Method to fetch protocol-specific data (can be extended with real APIs)\n  async getProtocolMetrics(protocol: string): Promise<any> {\n    switch (protocol.toLowerCase()) {\n      case 'hyperliquid':\n        return this.getHyperliquidMetrics();\n      case 'jupiter':\n        return this.getJupiterMetrics();\n      case 'aave':\n        return this.getAaveMetrics();\n      default:\n        throw new Error(`Unsupported protocol: ${protocol}`);\n    }\n  }\n\n  private async getHyperliquidMetrics(): Promise<any> {\n    // In real implementation, this would call Hyperliquid's API\n    return {\n      tradingVolume24h: 1200000000,\n      totalValueLocked: 890000000,\n      feeGeneration24h: 2400000\n    };\n  }\n\n  private async getJupiterMetrics(): Promise<any> {\n    // In real implementation, this would call Jupiter's API\n    return {\n      tradingVolume24h: 850000000,\n      totalValueLocked: 320000000,\n      feeGeneration24h: 850000\n    };\n  }\n\n  private async getAaveMetrics(): Promise<any> {\n    // In real implementation, this would call Aave's API\n    return {\n      tradingVolume24h: 45000000,\n      totalValueLocked: 12500000000,\n      feeGeneration24h: 180000\n    };\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}