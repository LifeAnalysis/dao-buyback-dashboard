{"ast":null,"code":"/**\n * Utility functions for formatting numbers, currency, and other data\n */import{NUMBER_FORMATS}from'../constants';/**\n * Format a number as currency with appropriate suffixes (K, M, B)\n */export const formatCurrency=function(num){let decimals=arguments.length>1&&arguments[1]!==undefined?arguments[1]:NUMBER_FORMATS.CURRENCY_DECIMALS;if(num>=1000000000){return`$${(num/1000000000).toFixed(decimals)}B`;}if(num>=1000000){return`$${(num/1000000).toFixed(decimals)}M`;}if(num>=1000){return`$${(num/1000).toFixed(decimals)}K`;}return`$${num.toLocaleString(undefined,{minimumFractionDigits:decimals,maximumFractionDigits:decimals})}`;};/**\n * Format a number as volume with appropriate suffixes\n */export const formatVolume=function(num){let decimals=arguments.length>1&&arguments[1]!==undefined?arguments[1]:NUMBER_FORMATS.VOLUME_DECIMALS;if(num>=1000000000){return`${(num/1000000000).toFixed(decimals)}B`;}if(num>=1000000){return`${(num/1000000).toFixed(decimals)}M`;}if(num>=1000){return`${(num/1000).toFixed(decimals)}K`;}return num.toLocaleString(undefined,{minimumFractionDigits:decimals,maximumFractionDigits:decimals});};/**\n * Format a number as percentage\n */export const formatPercentage=function(num){let decimals=arguments.length>1&&arguments[1]!==undefined?arguments[1]:NUMBER_FORMATS.PERCENTAGE_DECIMALS;let showSign=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;const sign=showSign&&num>0?'+':'';return`${sign}${num.toFixed(decimals)}%`;};/**\n * Format a number as a price with appropriate decimal places\n */export const formatPrice=function(num){let decimals=arguments.length>1&&arguments[1]!==undefined?arguments[1]:NUMBER_FORMATS.PRICE_DECIMALS;return`$${num.toFixed(decimals)}`;};/**\n * Format a large number with appropriate suffixes (for token amounts)\n */export const formatTokenAmount=function(num){let decimals=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;if(num>=1000000000){return`${(num/1000000000).toFixed(decimals)}B`;}if(num>=1000000){return`${(num/1000000).toFixed(decimals)}M`;}if(num>=1000){return`${(num/1000).toFixed(decimals)}K`;}return num.toLocaleString(undefined,{maximumFractionDigits:decimals});};/**\n * Format a date for display\n */export const formatDate=date=>{const d=typeof date==='string'?new Date(date):date;return d.toLocaleDateString('en-US',{month:'short',day:'numeric'});};/**\n * Format a timestamp for charts\n */export const formatChartDate=timestamp=>{const d=typeof timestamp==='string'?new Date(timestamp):timestamp;return d.toLocaleDateString('en-US',{month:'short',day:'numeric',year:'2-digit'});};/**\n * Truncate text with ellipsis\n */export const truncateText=(text,maxLength)=>{if(text.length<=maxLength)return text;return text.substring(0,maxLength-3)+'...';};/**\n * Capitalize first letter of each word\n */export const capitalizeWords=str=>{return str.replace(/\\b\\w/g,l=>l.toUpperCase());};/**\n * Get relative time string (e.g., \"2 hours ago\")\n */export const getRelativeTime=date=>{const now=new Date();const past=typeof date==='string'?new Date(date):date;const diffInSeconds=Math.floor((now.getTime()-past.getTime())/1000);if(diffInSeconds<60)return'Just now';if(diffInSeconds<3600)return`${Math.floor(diffInSeconds/60)} minutes ago`;if(diffInSeconds<86400)return`${Math.floor(diffInSeconds/3600)} hours ago`;if(diffInSeconds<2592000)return`${Math.floor(diffInSeconds/86400)} days ago`;return formatDate(past);};","map":{"version":3,"names":["NUMBER_FORMATS","formatCurrency","num","decimals","arguments","length","undefined","CURRENCY_DECIMALS","toFixed","toLocaleString","minimumFractionDigits","maximumFractionDigits","formatVolume","VOLUME_DECIMALS","formatPercentage","PERCENTAGE_DECIMALS","showSign","sign","formatPrice","PRICE_DECIMALS","formatTokenAmount","formatDate","date","d","Date","toLocaleDateString","month","day","formatChartDate","timestamp","year","truncateText","text","maxLength","substring","capitalizeWords","str","replace","l","toUpperCase","getRelativeTime","now","past","diffInSeconds","Math","floor","getTime"],"sources":["/Users/gherardolattanzi/treasury/src/utils/formatters.ts"],"sourcesContent":["/**\n * Utility functions for formatting numbers, currency, and other data\n */\n\nimport { NUMBER_FORMATS } from '../constants';\n\n/**\n * Format a number as currency with appropriate suffixes (K, M, B)\n */\nexport const formatCurrency = (num: number, decimals: number = NUMBER_FORMATS.CURRENCY_DECIMALS): string => {\n  if (num >= 1000000000) {\n    return `$${(num / 1000000000).toFixed(decimals)}B`;\n  }\n  if (num >= 1000000) {\n    return `$${(num / 1000000).toFixed(decimals)}M`;\n  }\n  if (num >= 1000) {\n    return `$${(num / 1000).toFixed(decimals)}K`;\n  }\n  return `$${num.toLocaleString(undefined, { \n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals \n  })}`;\n};\n\n/**\n * Format a number as volume with appropriate suffixes\n */\nexport const formatVolume = (num: number, decimals: number = NUMBER_FORMATS.VOLUME_DECIMALS): string => {\n  if (num >= 1000000000) {\n    return `${(num / 1000000000).toFixed(decimals)}B`;\n  }\n  if (num >= 1000000) {\n    return `${(num / 1000000).toFixed(decimals)}M`;\n  }\n  if (num >= 1000) {\n    return `${(num / 1000).toFixed(decimals)}K`;\n  }\n  return num.toLocaleString(undefined, { \n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals \n  });\n};\n\n/**\n * Format a number as percentage\n */\nexport const formatPercentage = (\n  num: number, \n  decimals: number = NUMBER_FORMATS.PERCENTAGE_DECIMALS,\n  showSign: boolean = false\n): string => {\n  const sign = showSign && num > 0 ? '+' : '';\n  return `${sign}${num.toFixed(decimals)}%`;\n};\n\n/**\n * Format a number as a price with appropriate decimal places\n */\nexport const formatPrice = (num: number, decimals: number = NUMBER_FORMATS.PRICE_DECIMALS): string => {\n  return `$${num.toFixed(decimals)}`;\n};\n\n/**\n * Format a large number with appropriate suffixes (for token amounts)\n */\nexport const formatTokenAmount = (num: number, decimals: number = 1): string => {\n  if (num >= 1000000000) {\n    return `${(num / 1000000000).toFixed(decimals)}B`;\n  }\n  if (num >= 1000000) {\n    return `${(num / 1000000).toFixed(decimals)}M`;\n  }\n  if (num >= 1000) {\n    return `${(num / 1000).toFixed(decimals)}K`;\n  }\n  return num.toLocaleString(undefined, { \n    maximumFractionDigits: decimals \n  });\n};\n\n/**\n * Format a date for display\n */\nexport const formatDate = (date: string | Date): string => {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  return d.toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n  });\n};\n\n/**\n * Format a timestamp for charts\n */\nexport const formatChartDate = (timestamp: string | Date): string => {\n  const d = typeof timestamp === 'string' ? new Date(timestamp) : timestamp;\n  return d.toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    year: '2-digit',\n  });\n};\n\n/**\n * Truncate text with ellipsis\n */\nexport const truncateText = (text: string, maxLength: number): string => {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength - 3) + '...';\n};\n\n/**\n * Capitalize first letter of each word\n */\nexport const capitalizeWords = (str: string): string => {\n  return str.replace(/\\b\\w/g, l => l.toUpperCase());\n};\n\n/**\n * Get relative time string (e.g., \"2 hours ago\")\n */\nexport const getRelativeTime = (date: string | Date): string => {\n  const now = new Date();\n  const past = typeof date === 'string' ? new Date(date) : date;\n  const diffInSeconds = Math.floor((now.getTime() - past.getTime()) / 1000);\n\n  if (diffInSeconds < 60) return 'Just now';\n  if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;\n  if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;\n  if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)} days ago`;\n  return formatDate(past);\n};"],"mappings":"AAAA;AACA;AACA,GAEA,OAASA,cAAc,KAAQ,cAAc,CAE7C;AACA;AACA,GACA,MAAO,MAAM,CAAAC,cAAc,CAAG,QAAAA,CAACC,GAAW,CAAkE,IAAhE,CAAAC,QAAgB,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAGJ,cAAc,CAACO,iBAAiB,CAC7F,GAAIL,GAAG,EAAI,UAAU,CAAE,CACrB,MAAO,IAAI,CAACA,GAAG,CAAG,UAAU,EAAEM,OAAO,CAACL,QAAQ,CAAC,GAAG,CACpD,CACA,GAAID,GAAG,EAAI,OAAO,CAAE,CAClB,MAAO,IAAI,CAACA,GAAG,CAAG,OAAO,EAAEM,OAAO,CAACL,QAAQ,CAAC,GAAG,CACjD,CACA,GAAID,GAAG,EAAI,IAAI,CAAE,CACf,MAAO,IAAI,CAACA,GAAG,CAAG,IAAI,EAAEM,OAAO,CAACL,QAAQ,CAAC,GAAG,CAC9C,CACA,MAAO,IAAID,GAAG,CAACO,cAAc,CAACH,SAAS,CAAE,CACvCI,qBAAqB,CAAEP,QAAQ,CAC/BQ,qBAAqB,CAAER,QACzB,CAAC,CAAC,EAAE,CACN,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAS,YAAY,CAAG,QAAAA,CAACV,GAAW,CAAgE,IAA9D,CAAAC,QAAgB,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAGJ,cAAc,CAACa,eAAe,CACzF,GAAIX,GAAG,EAAI,UAAU,CAAE,CACrB,MAAO,GAAG,CAACA,GAAG,CAAG,UAAU,EAAEM,OAAO,CAACL,QAAQ,CAAC,GAAG,CACnD,CACA,GAAID,GAAG,EAAI,OAAO,CAAE,CAClB,MAAO,GAAG,CAACA,GAAG,CAAG,OAAO,EAAEM,OAAO,CAACL,QAAQ,CAAC,GAAG,CAChD,CACA,GAAID,GAAG,EAAI,IAAI,CAAE,CACf,MAAO,GAAG,CAACA,GAAG,CAAG,IAAI,EAAEM,OAAO,CAACL,QAAQ,CAAC,GAAG,CAC7C,CACA,MAAO,CAAAD,GAAG,CAACO,cAAc,CAACH,SAAS,CAAE,CACnCI,qBAAqB,CAAEP,QAAQ,CAC/BQ,qBAAqB,CAAER,QACzB,CAAC,CAAC,CACJ,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAW,gBAAgB,CAAG,QAAAA,CAC9BZ,GAAW,CAGA,IAFX,CAAAC,QAAgB,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAGJ,cAAc,CAACe,mBAAmB,IACrD,CAAAC,QAAiB,CAAAZ,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,KAAK,CAEzB,KAAM,CAAAa,IAAI,CAAGD,QAAQ,EAAId,GAAG,CAAG,CAAC,CAAG,GAAG,CAAG,EAAE,CAC3C,MAAO,GAAGe,IAAI,GAAGf,GAAG,CAACM,OAAO,CAACL,QAAQ,CAAC,GAAG,CAC3C,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAe,WAAW,CAAG,QAAAA,CAAChB,GAAW,CAA+D,IAA7D,CAAAC,QAAgB,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAGJ,cAAc,CAACmB,cAAc,CACvF,MAAO,IAAIjB,GAAG,CAACM,OAAO,CAACL,QAAQ,CAAC,EAAE,CACpC,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAiB,iBAAiB,CAAG,QAAAA,CAAClB,GAAW,CAAmC,IAAjC,CAAAC,QAAgB,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CACjE,GAAIF,GAAG,EAAI,UAAU,CAAE,CACrB,MAAO,GAAG,CAACA,GAAG,CAAG,UAAU,EAAEM,OAAO,CAACL,QAAQ,CAAC,GAAG,CACnD,CACA,GAAID,GAAG,EAAI,OAAO,CAAE,CAClB,MAAO,GAAG,CAACA,GAAG,CAAG,OAAO,EAAEM,OAAO,CAACL,QAAQ,CAAC,GAAG,CAChD,CACA,GAAID,GAAG,EAAI,IAAI,CAAE,CACf,MAAO,GAAG,CAACA,GAAG,CAAG,IAAI,EAAEM,OAAO,CAACL,QAAQ,CAAC,GAAG,CAC7C,CACA,MAAO,CAAAD,GAAG,CAACO,cAAc,CAACH,SAAS,CAAE,CACnCK,qBAAqB,CAAER,QACzB,CAAC,CAAC,CACJ,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAkB,UAAU,CAAIC,IAAmB,EAAa,CACzD,KAAM,CAAAC,CAAC,CAAG,MAAO,CAAAD,IAAI,GAAK,QAAQ,CAAG,GAAI,CAAAE,IAAI,CAACF,IAAI,CAAC,CAAGA,IAAI,CAC1D,MAAO,CAAAC,CAAC,CAACE,kBAAkB,CAAC,OAAO,CAAE,CACnCC,KAAK,CAAE,OAAO,CACdC,GAAG,CAAE,SACP,CAAC,CAAC,CACJ,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAC,eAAe,CAAIC,SAAwB,EAAa,CACnE,KAAM,CAAAN,CAAC,CAAG,MAAO,CAAAM,SAAS,GAAK,QAAQ,CAAG,GAAI,CAAAL,IAAI,CAACK,SAAS,CAAC,CAAGA,SAAS,CACzE,MAAO,CAAAN,CAAC,CAACE,kBAAkB,CAAC,OAAO,CAAE,CACnCC,KAAK,CAAE,OAAO,CACdC,GAAG,CAAE,SAAS,CACdG,IAAI,CAAE,SACR,CAAC,CAAC,CACJ,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAC,YAAY,CAAGA,CAACC,IAAY,CAAEC,SAAiB,GAAa,CACvE,GAAID,IAAI,CAAC3B,MAAM,EAAI4B,SAAS,CAAE,MAAO,CAAAD,IAAI,CACzC,MAAO,CAAAA,IAAI,CAACE,SAAS,CAAC,CAAC,CAAED,SAAS,CAAG,CAAC,CAAC,CAAG,KAAK,CACjD,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAE,eAAe,CAAIC,GAAW,EAAa,CACtD,MAAO,CAAAA,GAAG,CAACC,OAAO,CAAC,OAAO,CAAEC,CAAC,EAAIA,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC,CACnD,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAC,eAAe,CAAIlB,IAAmB,EAAa,CAC9D,KAAM,CAAAmB,GAAG,CAAG,GAAI,CAAAjB,IAAI,CAAC,CAAC,CACtB,KAAM,CAAAkB,IAAI,CAAG,MAAO,CAAApB,IAAI,GAAK,QAAQ,CAAG,GAAI,CAAAE,IAAI,CAACF,IAAI,CAAC,CAAGA,IAAI,CAC7D,KAAM,CAAAqB,aAAa,CAAGC,IAAI,CAACC,KAAK,CAAC,CAACJ,GAAG,CAACK,OAAO,CAAC,CAAC,CAAGJ,IAAI,CAACI,OAAO,CAAC,CAAC,EAAI,IAAI,CAAC,CAEzE,GAAIH,aAAa,CAAG,EAAE,CAAE,MAAO,UAAU,CACzC,GAAIA,aAAa,CAAG,IAAI,CAAE,MAAO,GAAGC,IAAI,CAACC,KAAK,CAACF,aAAa,CAAG,EAAE,CAAC,cAAc,CAChF,GAAIA,aAAa,CAAG,KAAK,CAAE,MAAO,GAAGC,IAAI,CAACC,KAAK,CAACF,aAAa,CAAG,IAAI,CAAC,YAAY,CACjF,GAAIA,aAAa,CAAG,OAAO,CAAE,MAAO,GAAGC,IAAI,CAACC,KAAK,CAACF,aAAa,CAAG,KAAK,CAAC,WAAW,CACnF,MAAO,CAAAtB,UAAU,CAACqB,IAAI,CAAC,CACzB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}